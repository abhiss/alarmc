// deno-lint-ignore-file no-explicit-any
//this file is generated by generate_ast.ts
import { Token } from "./token.ts";

export abstract class Expr {
    abstract accept(visitor: Visitor<any>):any;
}

export interface Visitor<R> {
    visitAssignExpr(expr:Assign): R;
    visitBinaryExpr(expr:Binary): R;
    visitGroupingExpr(expr:Grouping): R;
    visitLiteralExpr(expr:Literal): R;
    visitUnaryExpr(expr:Unary): R;
    visitVariableExpr(expr:Variable): R;
}

export class Assign extends Expr {
    readonly name:Token;
    readonly value:Expr;
    constructor(name:Token, value:Expr) {
        super();
        this.name = name;
        this.value = value;
    }

    accept(visitor:Visitor<any>): any {
        return visitor.visitAssignExpr(this);
    }

}
export class Binary extends Expr {
    readonly left:Expr;
    readonly operator:Token;
    readonly right:Expr;
    constructor(left:Expr, operator:Token, right:Expr) {
        super();
        this.left = left;
        this.operator = operator;
        this.right = right;
    }

    accept(visitor:Visitor<any>): any {
        return visitor.visitBinaryExpr(this);
    }

}
export class Grouping extends Expr {
    readonly expression:Expr;
    constructor(expression:Expr) {
        super();
        this.expression = expression;
    }

    accept(visitor:Visitor<any>): any {
        return visitor.visitGroupingExpr(this);
    }

}
export class Literal extends Expr {
    readonly value:unknown;
    constructor(value:unknown) {
        super();
        this.value = value;
    }

    accept(visitor:Visitor<any>): any {
        return visitor.visitLiteralExpr(this);
    }

}
export class Unary extends Expr {
    readonly operator:Token;
    readonly right:Expr;
    constructor(operator:Token, right:Expr) {
        super();
        this.operator = operator;
        this.right = right;
    }

    accept(visitor:Visitor<any>): any {
        return visitor.visitUnaryExpr(this);
    }

}
export class Variable extends Expr {
    readonly name:Token;
    constructor(name:Token) {
        super();
        this.name = name;
    }

    accept(visitor:Visitor<any>): any {
        return visitor.visitVariableExpr(this);
    }

}

